{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMassage/error.gif","components/errorMassage/errorMassage.js","service/MarvelService.js","hooks/http.hook.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacters","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","comics","to","resourceURI","split","filter","Number","join","CharInfo","charId","skeleton","errorMassage","ErrorBoundary","state","err","info","console","log","this","setState","children","Component","CharSearchForm","getCharacterByName","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","MainPage","selectedChar","decoration","ErrorMassage","display","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_APIBASE","_APIKEY","res","_transformCharacter","getAllComics","_transformComics","getComics","slice","path","extension","urls","title","price","prices","language","textObjects"],"mappings":"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","file":"static/js/4.309b6b63.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner'\nimport ErrorMassage from '../errorMassage/errorMassage';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelService from '../../service/MarvelService';\n\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacters, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacters(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMassage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default RandomChar;","import { useState, useEffect, useRef,useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMassage/errorMassage';\nimport useMarvelService from '../../service/MarvelService';\n\nimport './charList.scss';\n\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n        .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if(newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList([...charList, ...newCharList])\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset + 9);\n        setCharEnded(charEnded => ended)\n\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item,i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            return (\n                <CSSTransition key={i} timeout={500} classNames=\"char__item\">\n                    <li className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        key={i} \n                        onClick ={() =>\n                        {props.onCharSelected(item.id);\n                        focusOnItem(i)}}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items} \n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n\n        const items = renderItems(charList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading && !newItemLoading ? <Spinner/> : null;\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {items}\n                <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' :  'block'}}\n                onClick={()=> onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n}\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react'; \nimport {useParams, Link} from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../../service/MarvelService.js';\nimport Spinner from '../spinner/Spinner'\nimport ErrorMassage from '../errorMassage/errorMassage';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n    const {loading,error,getCharacters, clearError} = useMarvelService();\n\n     useEffect(()=> {\n        updateChar();\n     }, [props.charId])\n\n     const updateChar = () => {\n        const {charId} = props;\n        if(!charId) {\n            return;\n        }\n        clearError();\n        getCharacters(charId).then(onCharLoaded)\n    }\n\n    const onCharLoaded = char => {\n        setChar(char);\n    }\n\n        const skeleton = char || loading || error ? null : <Skeleton/>;\n        const errorMassage = error ? <ErrorMassage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char = {char}/>: null;\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMassage}\n                {spinner}\n                {content}\n            </div>\n        )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki,comics,id} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n        return (\n            <>\n                <div className=\"char__basics\">\n                    <img src={thumbnail} alt={name} style={imgStyle}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length > 0 ? null : 'There is no comics with character'}\n                    {\n                        comics.map((item, i) => {\n                            if (i > 9)return;\n                            return (\n                                <li key = {id} className=\"char__comics-item\">\n                                    <Link to = {`/comics/${item.resourceURI.split('').filter(el=>Number(el)).join('')}`}>{item.name}</Link> \n                                </li>\n\n                            )\n                        })\n                    }\n\n                </ul>\n\n            </>\n        )\n}\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\nexport default CharInfo;","import { Component } from \"react/cjs/react.production.min\";\r\nimport ErrorMassage from \"../errorMassage/errorMassage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch ( err, info) {\r\n        console.log(err, info)\r\n        this.setState({error:true})\r\n     }\r\n\r\n     render () {\r\n        if (this.state.error)\r\n        return <ErrorMassage/>\r\n        return this.props.children;\r\n     }\r\n}\r\n\r\nexport default ErrorBoundary","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../service/MarvelService';\r\nimport ErrorMessage from '../errorMassage/errorMassage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n    const onCharSelected = id => {\r\n        setChar(id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n                <ErrorBoundary>\r\n                    <RandomChar/>\r\n                </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected = {onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId = {selectedChar}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharSearchForm/>\r\n                </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;\r\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMassage = () => {\r\n    return (\r\n        <img style = {{ display:'block', width: '250px', height: '250px',\r\n        objectFit:'contain', margin: '0, auto' }} src= {img} alt = \"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMassage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n const useMarvelService = () =>  {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _APIBASE = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _APIKEY = 'apikey=0f0b4c1cdd02b439fd1a6a3ba7c07876';\r\n    const _BASEOFFSET = 210;\r\n\r\n    const getAllCharacters = async (offset = _BASEOFFSET) => {\r\n        const res = await request(`${_APIBASE}characters?limit=9&offset=${offset}&${_APIKEY}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacters = async (id) => {\r\n        const res =  await  request(`${_APIBASE}characters/${id}?&${_APIKEY}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_APIBASE}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_APIKEY}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComics = async (id) => {\r\n        const res = await request(`${_APIBASE}comics/${id}?${_APIKEY}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_APIBASE}characters?name=${name}&${_APIKEY}`);\r\n        console.log(name)\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n    \r\n    const  _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[0].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n    const  _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n            description: comics.description || 'There is no description for this character',\r\n            language: comics.textObjects.language || 'en-us',\r\n\r\n        }\r\n    }\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacters,getComics,getAllComics,getCharacterByName};\r\n}\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            if (!response.ok) {\r\n                throw new Error (`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setError(error.message);\r\n            throw error;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback( () => setError(null), [])\r\n\r\n    return {loading, request, error, clearError}\r\n\r\n}\r\n"],"sourceRoot":""}